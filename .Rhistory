env_mat.tmp[, paste0("quad_", qt)] <- mean(env_mat.tmp[, qt])^2
}
proba_link <- env_mat.tmp %*% unname(coefs)
proba_resp <- plogis(proba_link)
marg.eff <- data.frame(quadr_term=env_mat.tmp[,quadr_term], PA=proba_resp)
colnames(marg.eff) <- c(quadr_term, "PA")
marg.eff <- marg.eff[order(marg.eff[, 1]), ]
# Plot
plot(x = marg.eff[, 1], y = marg.eff[, 2],
xlab=quadr_term, ylab="Probability of Presence",
ylim=c(0,1), type="l",  bty = "n")
p <- grDevices::recordPlot()
dev.off()
plotOut[[quadr_term]] <- p
}
# Non-quadratic predictors marginal effect
env_mat.tmp <- env_mat
# Fix non-quadratic predictors taking the mean
if (length(non_quadratic_terms) > 1) {
env_mat.tmp[, non_quadratic_terms] <- colMeans(env_mat.tmp[, non_quadratic_terms])
} else {
env_mat.tmp[, non_quadratic_terms] <- mean(env_mat.tmp[, non_quadratic_terms])
}
# Reorder columns in env_mat to match coefs names
env_mat.tmp <- as.matrix(env_mat.tmp[, names(coefs)])
proba_link <- env_mat.tmp %*% unname(coefs)
proba_resp <- plogis(proba_link)
myname <- names(coefs[which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term), "intercept"))])
marg.eff <- data.frame(x=env_mat.tmp[, myname], PA=proba_resp)
colnames(marg.eff) <- c(myname, "PA")
marg.eff <- marg.eff[order(marg.eff[, 1]), ]
# Plot
plot(x = marg.eff[, 1], y = marg.eff[, 2],
xlab=myname, ylab="Probability of Presence",
ylim=c(0,1), type="l",  bty = "n")
p <- grDevices::recordPlot()
dev.off()
plotOut[[myname]] <- p
plotOut <- cowplot::plot_grid(plotlist = plotOut, nrow=1, ncol=length(plotOut), labels = "AUTO")
return(list(rast=spatial_proba, margEff = plotOut))
} else {
return(spatial_proba)
}
}
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
myVS.po <- pippo(coefs = myCoef, #USE::SpatialProba
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
myVS.po$rast
myVS.po$margEff
myVS.po$rast
myVS.po$margEff
plot(myVS.po$rast)
myVS.po$margEff
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
myVS.po$margEff
plot(myVS.po$rast)
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
myVS.po$margEff
plot(myVS.po$rast)
# Convert the probability of occurrence raster to a raster of presence-absenceusing a random binomial draw
new.pres <- terra::app(myVS.po, fun = function(x) {replicate(1, rbinom(n = length(x), 1, x))})
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
myVS.po$plot
# Convert the probability of occurrence raster to a raster of presence-absenceusing a random binomial draw
new.pres <- terra::app(myVS.po$rast, fun = function(x) {replicate(1, rbinom(n = length(x), 1, x))})
#Sample true occurrences and true absences using a stratified sampling, keeping a sample prevalence fixed to 1
set.seed(123)
myVS.pa <- terra::spatSample(new.pres, 150, "stratified", xy=TRUE)
names(myVS.pa) <- c("x", "y", "Observed")
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
scale_fill_viridis_c(option = "E", na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
?scale_fill_viridis_c
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
scale_fill_viridis_c(option = "E", direction=-1, na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
scale_fill_grass_c("ramp", direction=-1, na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
tidyterra::scale_fill_grass_c("ramp", direction=-1, na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
tidyterra::scale_fill_grass_d("ramp", direction=-1, na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
tidyterra::scale_fill_whitebox_c("deep", direction=-1, na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
tidyterra::scale_fill_whitebox_c("deep", direction=1, na.value = "transparent", breaks=c(0,1)) +
geom_point(data=myVS.pa,
aes(x=x, y=y, color=as.factor(Observed)),
alpha=1, size=2, shape= 19)+
scale_colour_manual(name=NULL,
values=c("1"='steelblue',"0"='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species",
colour = "Presence/Absence")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
myPres <- subset(myVS.pa, myVS.pa$Observed==1)
myPres <- st_as_sf(myPres , coords=c("x", "y"), crs=4326)
rpc <- rastPCA(envData, stand = TRUE)
dt <- na.omit(as.data.frame(rpc$PCs[[c("PC1", "PC2")]], xy = TRUE))
dt <- sf::st_as_sf(dt, coords = c("PC1", "PC2"))
myRes <- list()
myRes$Opt_res <- 5
myObs <- USE::uniformSampling(sdf=dt,
grid.res=myRes$Opt_res,
n.tr = 5,
sub.ts = TRUE,
n.ts = 2,
plot_proc = FALSE)
head(myObs$obs.tr)
env_pca <- c(rpc$PCs$PC1, rpc$PCs$PC2)
env_pca <- na.omit(as.data.frame(env_pca))
ggplot(env_pca, aes(x=PC1))+
geom_density(aes(color="Environment"), linewidth=1 )+
geom_density(data=data.frame(st_coordinates(myObs$obs.tr)),
aes(x=X,  color="Uniform"), linewidth=1)+
scale_color_manual(name=NULL,
values=c('Environment'='#1E88E5', 'Uniform'='#D81B60'))+
labs(y="Density of PC-scores")+
ylim(0,1)+
theme_classic()+
theme(legend.position = "bottom",
text = element_text(size=14),
legend.text=element_text(size=12))
ggplot(env_pca, aes(x=PC2))+
geom_density(aes(color="Environment"), linewidth=1 )+
geom_density(data=data.frame(st_coordinates(myObs$obs.tr)),
aes(x=Y,  color="Uniform"), linewidth=1)+
scale_color_manual(name=NULL,
values=c('Environment'='#1E88E5', 'Uniform'='#D81B60'))+
labs(y="Density of PC-scores")+
ylim(0,1)+
theme_classic()+
theme(legend.position = "bottom",
text = element_text(size=14),
legend.text=element_text(size=12))
myGrid.psAbs <- USE::paSampling(env.rast=envData,
pres=myPres,
thres=0.75,
H=NULL,
grid.res=as.numeric(myRes$Opt_res),
n.tr = 5,
prev=0.3,
sub.ts=TRUE,
n.ts=5,
plot_proc=FALSE,
verbose=FALSE)
myGrid.psAbs <- USE::paSampling(env.rast=envData,
pres=myPres,
thres=0.75,
H=NULL,
grid.res=as.numeric(myRes$Opt_res),
n.tr = 5,
prev=1,
sub.ts=TRUE,
n.ts=5,
plot_proc=FALSE,
verbose=FALSE)
ggplot(env_pca, aes(x=PC1))+
geom_density(aes(color="Environment"), linewidth=1 )+
geom_density(data=data.frame(st_coordinates(myGrid.psAbs$obs.tr)),
aes(x=X,  color="Uniform"), linewidth=1)+
geom_density(data=terra::extract(c(rpc$PCs$PC1, rpc$PCs$PC2), myPres, df=TRUE),
aes(x=PC1, color="Presence"), linewidth=1 )+
scale_color_manual(name=NULL,
values=c('Environment'='#1E88E5', 'Uniform'='#D81B60', "Presence"="black"))+
labs(y="Density of PC-scores")+
ylim(0,1)+
theme_classic()+
theme(legend.position = "bottom",
text = element_text(size=14),
legend.text=element_text(size=12))
ggplot(env_pca, aes(x=PC2))+
geom_density(aes(color="Environment"), linewidth=1 )+
geom_density(data=data.frame(st_coordinates(myGrid.psAbs$obs.tr)),
aes(x=Y,  color="Uniform"), linewidth=1)+
geom_density(data=terra::extract(c(rpc$PCs$PC1, rpc$PCs$PC2), myPres, df=TRUE),
aes(x=PC2, color="Presence"), linewidth=1 )+
scale_color_manual(name=NULL,
values=c('Environment'='#1E88E5', 'Uniform'='#D81B60', "Presence"="black"))+
labs(y="Density of PC-scores")+
ylim(0,1)+
theme_classic()+
theme(legend.position = "bottom",
text = element_text(size=14),
legend.text=element_text(size=12))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
scale_fill_viridis_c(na.value = "transparent", breaks=c(0,1)) +
geom_sf(data=myPres,
aes(color= "Presences"),
alpha=1, size=2, shape= 19)+
geom_sf(data=st_as_sf(st_drop_geometry(myGrid.psAbs$obs.tr),
coords = c("x","y"), crs=4326),
aes(color="Pseudo-absences"),
alpha=0.8, size=2, shape = 19 )+
scale_colour_manual(name=NULL,
values=c('Presences'='steelblue','Pseudo-absences'='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
tidyterra::scale_fill_whitebox_c("deep", direction=1, na.value = "transparent",
breaks=c(0,1)) +
scale_fill_viridis_c(na.value = "transparent", breaks=c(0,1)) +
geom_sf(data=myPres,
aes(color= "Presences"),
alpha=1, size=2, shape= 19)+
geom_sf(data=st_as_sf(st_drop_geometry(myGrid.psAbs$obs.tr),
coords = c("x","y"), crs=4326),
aes(color="Pseudo-absences"),
alpha=0.8, size=2, shape = 19 )+
scale_colour_manual(name=NULL,
values=c('Presences'='steelblue','Pseudo-absences'='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
ggplot()+
tidyterra::geom_spatraster(data = new.pres)+
tidyterra::scale_fill_whitebox_c("deep", direction=1, na.value = "transparent",
breaks=c(0,1)) +
# scale_fill_viridis_c(na.value = "transparent", breaks=c(0,1)) +
geom_sf(data=myPres,
aes(color= "Presences"),
alpha=1, size=2, shape= 19)+
geom_sf(data=st_as_sf(st_drop_geometry(myGrid.psAbs$obs.tr),
coords = c("x","y"), crs=4326),
aes(color="Pseudo-absences"),
alpha=0.8, size=2, shape = 19 )+
scale_colour_manual(name=NULL,
values=c('Presences'='steelblue','Pseudo-absences'='#A41616'))+
labs(x="Longitude",
y="Latitude",
fill="Virtual species")+
theme_light()+
theme(legend.position = "bottom",
legend.background=element_blank(),
legend.box="vertical",
panel.grid = element_blank(),
text = element_text(size=14),
legend.text=element_text(size=14),
aspect.ratio = 1,
panel.spacing.y = unit(2, "lines"))
#------USE-----------------
setwd("/home/dared/GitHub/USE/")
# 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
# token
library(devtools)
library(roxygen2)
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
#
USE::Worldclim_tmp$bio1
library(spelling)
spell_check()
#check everything is ok for the CRAN
devtools::check()#vignettes=FALSE
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#check everything is ok for the CRAN
devtools::check()#vignettes=FALSE
#Generate layers of D. sperandii distribution
D.sperandii.link <- -11.3886498 + 1.3835909*envData$bio1 -0.0920092*(envData$bio1^2) + 0.0071542*envData$bio12
D.sperandii.prob <- calc(D.sperandii.link, plogis)
D.sperandii.prob <- terra::app(D.sperandii.link, plogis)
D.sperandii.prob
plot(D.sperandii.prob)
hist(D.sperandii.prob)
pippo <- function(coefs=NULL, env.rast=NULL, quadr_term = NULL, marginalPlots=TRUE) {
# Check and prepare data (as before)
if (isTRUE(is.null(names(coefs)))) stop("coefs must be a named vector")
if (inherits(env.rast, "BasicRaster")) {
env.rast <- terra::rast(env.rast)
}
if (isTRUE(!is.null(quadr_term))) {
if (!isTRUE(any(grepl("quad", x = names(coefs))))) stop("quadr term specified, but no term with prefix 'quad' found in coefs")
}
# Get names of predictors (excluding intercept and quadratic terms)
coefs_names <- names(coefs[!grepl("intercept|quad", x = names(coefs))])
if (isTRUE(!all(coefs_names %in% names(env.rast)))) stop("not all names in coefs are found in env.rast")
# Prepare the environmental data
env_df <- terra::as.data.frame(env.rast, na.rm = TRUE, xy = TRUE)
env_coords <- as.matrix(env_df[c("x", "y")])
env_df <- env_df[-c(1, 2)]  # Remove coordinates
# Add quadratic terms if specified
if (!is.null(quadr_term)) {
message(paste("Adding quadratic term for:", paste(quadr_term, collapse = " ")))
quad_df <- data.frame(lapply(quadr_term, function(coef_nm) (env_df[[coef_nm]])^2))
colnames(quad_df) <- paste0("quad_", quadr_term)
env_df <- cbind(env_df, quad_df)
}
# Create the matrix for the environmental data (including intercept)
env_mat <- as.matrix(cbind("intercept" = 1, env_df))
# Re-order columns to match coefs
env_mat <- env_mat[, names(coefs)]
# Compute probabilities (logit scale)
proba_link <- env_mat %*% unname(coefs)
# Back-transform to probability (response) scale using plogis
proba_resp <- stats::plogis(proba_link)
# Rasterize the probability to match the raster spatial grid
spatial_proba <- terra::rasterize(x = env_coords, y = env.rast[[1]], values = proba_resp)
names(spatial_proba) <- "TrueProba"
# Marginal effect calculations (if requested)
if (isTRUE(marginalPlots)) {
plotOut <- list()
# Marginal effect for the quadratic term (if specified)
if (!is.null(quadr_term)) {
Bio1_seq <- seq(min(env_df$bio1, na.rm = TRUE), max(env_df$bio1, na.rm = TRUE), length.out = 100)
marg_effect_quadr <- plogis(cbind(1, Bio1_seq, Bio1_seq^2) %*% c(
coefs["intercept"] + 0.0071542 * cellStats(env.rast$bio12, 'mean'),
coefs["bio1"], coefs["quadr_bio1"]
))
# Plot the marginal effect for the quadratic term
plot(Bio1_seq, marg_effect_quadr, type="l", xlab=quadr_term, ylab="Probability of Presence", ylim=c(0, 1), bty="n")
p <- grDevices::recordPlot()
dev.off()
plotOut[[quadr_term]] <- p
}
# For other environmental variables (linear terms), repeat the process
for (env_var in coefs_names[!coefs_names %in% c("intercept", quadr_term, paste0("quad_", quadr_term))]) {
env_var_seq <- seq(min(env_df[[env_var]], na.rm = TRUE), max(env_df[[env_var]], na.rm = TRUE), length.out = 100)
marg_effect_linear <- plogis(cbind(1, env_var_seq) %*% c(
coefs["intercept"] + 0.0071542 * cellStats(env.rast$bio12, 'mean'),
coefs[env_var]
))
# Plot the marginal effect for the linear term
plot(env_var_seq, marg_effect_linear, type="l", xlab=env_var, ylab="Probability of Presence", ylim=c(0, 1), bty="n")
p <- grDevices::recordPlot()
dev.off()
plotOut[[env_var]] <- p
}
# Combine all marginal effect plots
plotOut <- cowplot::plot_grid(plotlist = plotOut, nrow = 1, ncol = length(plotOut), labels = "AUTO")
return(list(rast = spatial_proba, plot = plotOut))
} else {
return(spatial_proba)
}
}
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
myVS.po <- pippo(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
