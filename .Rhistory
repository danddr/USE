points(antelao)
plot(myArea_ext, add=TRUE)
myArea_ext[4] <- myArea_ext[4] - 2000 # sposto indietro area di 5 km
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[4] <- myArea_ext[4] - 2000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[4] <- myArea_ext[4] + 2000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
# myScale <- 50000
# myArea<-aoi(xmin=st_coordinates(antelao)[1] + 2500,
#             ymin=st_coordinates(antelao)[2] + 6000,
#             radius=myRad,
#             scale=myScale, method = "buffer")
myScale <- 35000
myArea<-aoi(xmin=st_coordinates(antelao)[1] - 1500,
ymin=st_coordinates(antelao)[2] + 2500,
radius=myRad,
scale=myScale, method = "buffer")
plot(dem)
points(antelao)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[4] <- myArea_ext[4] - 2000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[4] <- myArea_ext[4] - 5000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[4] <- myArea_ext[4] - 10000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(myArea_ext, add=TRUE)
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[1] <- myArea_ext[1] - 10000
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(myArea_ext, add=TRUE)
plot(dem)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[1] <- myArea_ext[1] - (myArea_ext[1] * 0.2)
myArea_ext[2] <- myArea_ext[2] - (myArea_ext[2] * 0.2)
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
# myArea_ext[1] <- myArea_ext[1] - (myArea_ext[1] * 0.2)
# myArea_ext[2] <- myArea_ext[2] - (myArea_ext[2] * 0.2)
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
plot(myArea_ext, add=TRUE)
points(antelao)
# myArea_ext<-myArea
dem.c <- crop(dem, myArea_ext)
plot(dem.c)
points(antelao)
#---- 3. Inspect and regulate DEM dimensions and resolution ----
# To ease the whole processing, is important that the DEM has even lenght
(ext(dem.c)[2]-ext(dem.c)[1])/1000
res(dem.c) #resolution is not even, let's round it
dem.rsp <- dem.c
#check precision of the pixel, given the input resolution and scale: 0.3<best<0.5 mm
outPrecision(dem.rsp, myScale)
#check prominnenza
max(values(dem.rsp), na.rm = TRUE) * 10^3 / myScale
# dimensioni area da fresare
myDim <- data.frame(t(matrix(ext(dem.rsp))))
names(myDim) <- c("xmin", "xmax", "ymin", "ymax")
df<-data.frame(larghezza = round(c((myDim$xmax - myDim$xmin)/10^3,
(myDim$xmax - myDim$xmin) * 10^3 /myScale),2),
altezza = round(c((myDim$ymax - myDim$ymin)/10^3,
(myDim$ymax - myDim$ymin) * 10^3  /myScale), 2),
prominenza = round(c(max(values(dem.rsp), na.rm = TRUE) / 10^3,
max(values(dem.rsp), na.rm = TRUE) * 10^3 / myScale), 2),
drillingPrecision= c(NA, round(outPrecision(dem.rsp, myScale), 3)),
udm = c( "km", "mm"))
df
#---- 4. smoothing ----
# plot(dem.rsp)
# points(antelao)
round(ext(dem.rsp))
quantile(5145140:5159990 , probs=0.10)
tmp <- smoothing_borders(inputDEM=raster::raster(dem.rsp),
col2corr=0,
row2corr= round(ncol(dem.rsp)*0.10),
showPlot=TRUE, border="bottom")
# rasterVis::plot3D(raster(dem.rsp))
rasterVis::plot3D(tmp)
plot(dem.c)
points(antelao, cex=2)
#---- 5. save output tif and stl ----
# outname <- paste0(location_name, "_larg", myRad, "mm_scale_1a",myScale/1000, "k.tif" )
outname <- paste0(location_name, "_scale_1a",myScale/1000, "k.tif" )
outname
writeRaster(tmp, outname, overwrite=TRUE )
system("phstl.py antelao_scale_1a35k.tif antelao_scale_1a35k.stl")
#---- 2- select aoi ----
# 1100 mm altezza e larghezza  495mm per pezzo quadrato ECHO
location_name <- "antelao"
# tolerance <- 15 # (mm) margine conservativo
myRad <- 1500/2 #(mm) profondità (diametro in questo caso) dell'area da fresare, divido per due per avere il raggio
# myScale <- 50000
# myArea<-aoi(xmin=st_coordinates(antelao)[1] + 2500,
#             ymin=st_coordinates(antelao)[2] + 6000,
#             radius=myRad,
#             scale=myScale, method = "buffer")
myScale <- 35000
myArea<-aoi(xmin=st_coordinates(antelao)[1] - 1500,
ymin=st_coordinates(antelao)[2] + 2500,
radius=myRad,
scale=myScale, method = "buffer")
plot(dem)
points(antelao)
plot(myArea, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
# myArea_ext[1] <- myArea_ext[1] - (myArea_ext[1] * 0.2)
# myArea_ext[2] <- myArea_ext[2] - (myArea_ext[2] * 0.2)
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
myArea_ext
ext(vect(myArea))
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[2] <- myArea_ext[2] - (50 * myScale)/10^3
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[2] <- myArea_ext[2] - (500 * myScale)/10^3
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(myArea_ext, add=TRUE)
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[2] <- myArea_ext[2] + (500 * myScale)/10^3
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[2] <- myArea_ext[2] + (500 * myScale)/10^3
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[4] <- myArea_ext[4] + (50 * myScale)/10^3
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
plot(myArea_ext, add=TRUE)
# myArea_ext<-myArea
dem.c <- crop(dem, myArea_ext)
#let's manually extent the crop area for the buffer
myArea_ext <- ext(vect(myArea))
myArea_ext
myArea_ext[2] <- myArea_ext[2] + (500 * myScale)/10^3
myArea_ext[4] <- myArea_ext[4] - 13000 # sposto indietro area di 5 km
myArea_ext[4] <- myArea_ext[4] + (50 * myScale)/10^3
myArea_ext[3] <- myArea_ext[4] - (750 * myScale)/10^3 #495 mm è la larghezza finale dell'area da fresare, mi ricavo le coordinate di xmax in scala
myArea_ext <- as.polygons(myArea_ext, crs= crs(dem))
plot(dem)
points(antelao)
plot(myArea_ext, add=TRUE)
# myArea_ext<-myArea
dem.c <- crop(dem, myArea_ext)
plot(dem.c)
points(antelao, cex=2)
#---- 3. Inspect and regulate DEM dimensions and resolution ----
# To ease the whole processing, is important that the DEM has even lenght
(ext(dem.c)[2]-ext(dem.c)[1])/1000
res(dem.c) #resolution is not even, let's round it
dem.rsp <- dem.c
#check precision of the pixel, given the input resolution and scale: 0.3<best<0.5 mm
outPrecision(dem.rsp, myScale)
#check prominnenza
max(values(dem.rsp), na.rm = TRUE) * 10^3 / myScale
#---- 4. smoothing ----
# plot(dem.rsp)
# points(antelao)
round(ext(dem.rsp))
quantile(5145140:5159990 , probs=0.10)
tmp <- smoothing_borders(inputDEM=raster::raster(dem.rsp),
col2corr=0,
row2corr= round(ncol(dem.rsp)*0.10),
showPlot=TRUE, border="bottom")
plot(tmp)
points(antelao, cex=3)
# rasterVis::plot3D(raster(dem.rsp))
rasterVis::plot3D(tmp)
tmp
tmp.out<-rast(tmp)
tmp.out
plot(tmp.out)
writeRaster(tmp, outname, overwrite=TRUE )
#---- 5. save output tif and stl ----
# outname <- paste0(location_name, "_larg", myRad, "mm_scale_1a",myScale/1000, "k.tif" )
outname <- paste0(location_name, "_scale_1a",myScale/1000, "k.tif" )
outname
writeRaster(tmp, outname, overwrite=TRUE )
system("phstl.py antelao_scale_1a35k.tif antelao_scale_1a35k.stl")
?smoothing_borders
??smoothing_borders
# Set parameters
N <- 10000   # Number of samples
sigma <- 0.1 # Proposal standard deviation
bounds <- list(x = c(0, 1), y = c(0, 1)) # Sampling space: [0,1]x[0,1]
# Initialize Markov Chain
x <- numeric(N)
y <- numeric(N)
x[1] <- runif(1, bounds$x[1], bounds$x[2])  # Start in a random position
y[1] <- runif(1, bounds$y[1], bounds$y[2])
# Metropolis-Hastings Algorithm
for (i in 2:N) {
# Propose a new state (random walk)
x_proposal <- x[i-1] + rnorm(1, mean=0, sd=sigma)
y_proposal <- y[i-1] + rnorm(1, mean=0, sd=sigma)
# Check if the proposed state is inside the bounds
if (bounds$x[1] <= x_proposal && x_proposal <= bounds$x[2] &&
bounds$y[1] <= y_proposal && y_proposal <= bounds$y[2]) {
# Since the target distribution is uniform, accept every valid move
x[i] <- x_proposal
y[i] <- y_proposal
} else {
# Reject the move (stay at the current position)
x[i] <- x[i-1]
y[i] <- y[i-1]
}
}
# Plot the sampled points
plot(x, y, pch=20, col=rgb(0, 0, 1, 0.5), main="Metropolis-Hastings Uniform Sampling in 2D")
bounds
# Set parameters
N <- 10000   # Number of samples
sigma <- 0.1 # Proposal standard deviation
dims <- 4    # Number of dimensions
bounds <- matrix(c(0, 1, 0, 1, 0, 1, 0, 1), nrow=dims, byrow=TRUE) # 4D unit hypercube
# Initialize Markov Chain
samples <- matrix(runif(dims, 0, 1), nrow=N, ncol=dims)  # Start in a random position
# Metropolis-Hastings Algorithm
for (i in 2:N) {
# Propose a new state (Gaussian step)
proposal <- samples[i-1, ] + rnorm(dims, mean=0, sd=sigma)
# Check if the proposal is inside the [0,1] bounds
if (all(proposal >= bounds[,1]) && all(proposal <= bounds[,2])) {
samples[i, ] <- proposal  # Accept move
} else {
samples[i, ] <- samples[i-1, ]  # Reject move (stay in place)
}
}
# Convert to a data frame for visualization/analysis
samples_df <- as.data.frame(samples)
colnames(samples_df) <- paste0("X", 1:dims)
# Check first few rows
head(samples_df)
plot(samples[,1], samples[,2], pch=20, col=rgb(0, 0, 1, 0.5),
xlab="X1", ylab="X2", main="Projection of 4D Sampling (X1 vs X2)")
pairs(samples_df[1:1000, ], pch=20, col=rgb(0, 0, 1, 0.5))
#----- let's do it in a geographical space -----
# Load necessary libraries
library(terra)
# Simulate environmental layers (replace with real raster data)
set.seed(42)
nrow <- 100
ncol <- 100
layer1 <- matrix(runif(nrow * ncol, min=10, max=30), nrow, ncol)  # Temperature
layer2 <- matrix(runif(nrow * ncol, min=500, max=2000), nrow, ncol)  # Precipitation
layer3 <- matrix(runif(nrow * ncol, min=0, max=1), nrow, ncol)  # Soil moisture
layer4 <- matrix(runif(nrow * ncol, min=50, max=300), nrow, ncol)  # Elevation
# Stack into a data frame
pixels <- expand.grid(x=1:nrow, y=1:ncol)
pixels$T  <- as.vector(layer1)
pixels$P  <- as.vector(layer2)
pixels$SM <- as.vector(layer3)
pixels$E  <- as.vector(layer4)
# Number of pixels to sample
k <- 50
# Define an objective function: maximize environmental variance
compute_score <- function(sample_indices, env_data) {
sampled_data <- env_data[sample_indices, ]
score <- sum(apply(sampled_data, 2, var))  # Sum of variances across dimensions
return(score)
}
# Initialize MCMC with random sample
set.seed(123)
env_data <- scale(pixels[,3:6])  # Standardize environmental layers
current_sample <- sample(1:nrow(pixels), k)
current_score <- compute_score(current_sample, env_data)
# MCMC parameters
n_iter <- 5000
accept_rate <- 0
# MCMC Sampling Loop
for (i in 1:n_iter) {
# Propose a new sample by swapping one pixel
new_sample <- current_sample
swap_idx <- sample(1:k, 1)  # Choose a random pixel to replace
new_sample[swap_idx] <- sample(setdiff(1:nrow(pixels), current_sample), 1)  # New pixel
# Compute new score
new_score <- compute_score(new_sample, env_data)
# Metropolis acceptance step
if (new_score > current_score || runif(1) < exp(new_score - current_score)) {
current_sample <- new_sample
current_score <- new_score
accept_rate <- accept_rate + 1
}
}
# Convert selected pixels back to spatial coordinates
selected_pixels <- pixels[current_sample, ]
# Plot the selected pixels on one environmental layer
image(layer1, col=terrain.colors(100), main="MCMC Selected Sampling Points on Temperature")
points(selected_pixels$x, selected_pixels$y, col="red", pch=19)
selected_pixels$x
selected_pixels$y
# Plot the selected pixels on one environmental layer
image(layer1, col=terrain.colors(100), main="MCMC Selected Sampling Points on Temperature")
points(selected_pixels$x, selected_pixels$y, col="red", pch=19)
# Print acceptance rate
print(paste("Acceptance rate:", accept_rate / n_iter))
selected_pixels
score <- -sum(prop.table(table(cut(sampled_data, 10))) * log(prop.table(table(cut(sampled_data, 10)))))
knitr::opts_chunk$set(echo = TRUE)
library(USE)
library(terra)
library(sf)
library(ggplot2)
envData <- USE::Worldclim_tmp
envData <- terra::rast(envData,  type="xyz")
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
debugonce(SpatialProba)
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
quadr_term
coef_nm
env_df
quad_df <- data.frame(lapply(quadr_term, function(coef_nm) (env_df[[coef_nm]])^2))
quad_df
colnames(quad_df) <- paste0("quad_", quadr_term)
env_df <- cbind(env_df, quad_df)
env_df
names(env_df)
env_mat <- as.matrix(cbind(intercept = 1, env_df))
env_mat <- env_mat[, names(coefs)]
names(coefs)
colnames(env_mat)
if (isTRUE(!all(colnames(env_mat) == names(coefs))))
stop("Names do not match between environmental matrix and coef vector")
proba_link <- env_mat %*% unname(coefs)
proba_resp <- stats::plogis(proba_link)
spatial_proba <- terra::rasterize(x = env_coords, y = env.rast[[1]],
values = proba_resp)
spatial_proba
names(spatial_proba) <- "TrueProba"
coefs_names
quadr_term
quadr_term
env_mat.tmp[, coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]]
env_mat.tmp
c(quadr_term, paste0("quad_", quadr_term))
!coefs_names
coefs_names
env_mat.tmp[, coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]]
quadr_term
c(quadr_term, paste0("quad_", quadr_term))
!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))
coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]
env_mat.tmp
debugonce(SpatialProba)
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
is.null(quadr_term)
isTRUE(!is.null(quadr_term))
env_mat.tmp[, coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]]
env_mat.tmp[, coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]]
env_mat.tmp[, coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]]
mean(env_mat.tmp[, coefs_names[!coefs_names %in% c(quadr_term, paste0("quad_", quadr_term))]])
proba_resp
quadr_term
env_mat.tmp[, which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term)))]
env_mat.tmp[, c(quadr_term, paste0("quad_", quadr_term))]
colMeans(env_mat.tmp[, c(quadr_term, paste0("quad_", quadr_term))])
env_mat.tmp[, quadr_term]
colMeans(env_mat.tmp[, quadr_term])
mean(env_mat.tmp[, quadr_term])
c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2)
data.frame(t(colMeans(env_mat.tmp[, c(quadr_term, paste0("quad_", quadr_term))])))
data.frame(t(c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2)))
data.frame(t(c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2)))
data.frame(c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2))
c(quadr_term, paste0("quad_", quadr_term))
# env_mat.tmp <-
cbind(env_mat.tmp[, which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term)))],
data.frame(t(colMeans(env_mat.tmp[, c(quadr_term, paste0("quad_", quadr_term))]))))
debugonce(SpatialProba)
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
# env_mat.tmp <-
cbind(env_mat.tmp[, which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term)))],
data.frame(t(colMeans(env_mat.tmp[, c(quadr_term, paste0("quad_", quadr_term))]))))
cbind(env_mat.tmp[, which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term)))],
data.frame(t(c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2)))
)
# env_mat.tmp <-
cbind(env_mat.tmp[, which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term)))],
data.frame(t(colMeans(env_mat.tmp[, c(quadr_term, paste0("quad_", quadr_term))]))))
data.frame(t(c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2)))
data.frame(t(c(quadr_term = mean(env_mat.tmp[, quadr_term]),paste0("quad_", quadr_term)=mean(env_mat.tmp[, quadr_term])^2)))
paste0("quad_", quadr_term)
data.frame(t(c(quadr_term = mean(env_mat.tmp[, quadr_term]), paste0("quad_", quadr_term) = mean(env_mat.tmp[, quadr_term])^2)))
data.frame(t(c(mean(env_mat.tmp[, quadr_term]),mean(env_mat.tmp[, quadr_term])^2)))
cbind(
env_mat.tmp[, which(!colnames(env_mat.tmp) %in% c(quadr_term, paste0("quad_", quadr_term)))],
setNames(
data.frame(t(c(mean(env_mat.tmp[, quadr_term]), mean(env_mat.tmp[, quadr_term])^2))),
c(quadr_term, paste0("quad_", quadr_term))
)
)
#------USE-----------------
setwd("/home/dared/GitHub/USE/")
# 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
# token
library(devtools)
library(roxygen2)
# library(usethat)
# devtools::create("yourPkg")
# devtools::install_github("mattmar/dynamAedes")
devtools::load_all(".") # Working directory should be in the package directory
#update documentation
devtools::document()
library(USE)
library(terra)
library(sf)
library(ggplot2)
envData <- USE::Worldclim_tmp
envData <- terra::rast(envData,  type="xyz")
myCoef <- c(-8, 1.7, -0.1, -0.001) #0.001
names(myCoef) <- c("intercept", "bio1", "quad_bio1", "bio12" )
myVS.po <- USE::SpatialProba(coefs = myCoef,
env.rast = envData,
quadr_term = "bio1",
marginalPlots = TRUE)
myVS.po$plot
plot(myVS.po$rast)
